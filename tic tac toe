import pygame
import sys
import time
import pygame.locals
 
XO = 'x'
 
winner = None
 
draw = None
 
width = 400
 
height = 400

white = (255, 255, 255)
 
line_color = (0, 0, 0)
 
board = [[None]*4, [None]*4, [None]*4, [None]*4]
 
pygame.init()
fps = 120
CLOCK = pygame.time.Clock()
screen = pygame.display.set_mode((width, height + 100), 0, 32)

pygame.display.set_caption("My Tic Tac Toe")
 
initiating_window = pygame.image.load("modified_cover.png")
x_img = pygame.image.load("X_modified.png")
y_img = pygame.image.load("o_modified.png")

initiating_window = pygame.transform.scale(
    initiating_window, (width, height + 100))
x_img = pygame.transform.scale(x_img, (60, 60))
o_img = pygame.transform.scale(y_img, (60, 60))
 
 
def game_initiating_window():
 
    screen.blit(initiating_window, (0, 0))
 
    pygame.display.update()
    time.sleep(3)
    screen.fill(white)
 
    pygame.draw.line(screen, line_color, (width / 4, 0), (width / 4, height), 7)
    pygame.draw.line(screen, line_color, (width / 4 * 2, 0),
                 (width / 4 * 2, height), 7)
    pygame.draw.line(screen, line_color, (width / 4 * 3, 0),
                 (width / 4 * 3, height), 7)

    pygame.draw.line(screen, line_color, (0, height / 4), (width, height / 4), 7)
    pygame.draw.line(screen, line_color, (0, height / 4 * 2),
                 (width, height / 4 * 2), 7)
    pygame.draw.line(screen, line_color, (0, height / 4 * 3),
                 (width, height / 4 * 3), 7)
    draw_status()
 
 
def draw_status():

    global draw
 
    if winner is None:
        message = XO.upper() + "'s Turn"
    else:
        message = winner.upper() + " won !"
    if draw:
        message = "Game Draw !"

    font = pygame.font.Font(None, 30)
 
    text = font.render(message, 1, (255, 255, 255))

    screen.fill((0, 0, 0), (0, 400, 500, 100))
    text_rect = text.get_rect(center=(width / 2, 500-50))
    screen.blit(text, text_rect)
    pygame.display.update()
 
 
def check_win():
    global board, winner, draw

    # Check rows for a win
    for row in range(4):
        if (board[row][0] == board[row][1] == board[row][2] and board[row][0] is not None) or \
           (board[row][1] == board[row][2] == board[row][3] and board[row][1] is not None):
            winner = board[row][1]
            pygame.draw.line(screen, (250, 0, 0),
                         (0, (row + 1) * height // 4 - height // 8),
                         (width, (row + 1) * height // 4 - height // 8),
                         4)
            break

    for col in range(4):
        if (board[0][col] == board[1][col] == board[2][col] and board[0][col] is not None) or \
           (board[1][col] == board[2][col] == board[3][col] and board[1][col] is not None):
            winner = board[1][col]
            pygame.draw.line(screen, (250, 0, 0), ((col + 1) * width // 4 - width // 8, 0),
                         ((col + 1) * width // 4 - width // 8, height), 4)
            break

    if (board[0][0] == board[1][1] == board[2][2] and board[0][0] is not None) or \
       (board[1][1] == board[2][2] == board[3][3] and board[1][1] is not None):
        winner = board[1][1]
        pygame.draw.line(screen, (250, 70, 70), (50, 50), (350, 350), 4)

    if (board[0][3] == board[1][2] == board[2][1] and board[0][3] is not None) or \
       (board[1][2] == board[2][1] == board[3][0] and board[1][2] is not None):
        winner = board[1][2]
        pygame.draw.line(screen, (250, 70, 70), (350, 50), (50, 350), 4)

    if all([all(row) for row in board]) and winner is None:
        draw = True
    draw_status()
 
 
def drawXO(row, col):
    global board, XO
   
    if row == 1:
        posx = 30
 

    if row == 2:
        posx = width / 4 + 30
 
    if row == 3:
        posx = width / 4 * 2 + 30

    if row == 4:
        posx = width / 4 * 3 + 30
 
    if col == 1:
        posy = 30
 
    if col == 2:
        posy = height / 4 + 30
 
    if col == 3:
        posy = height / 4 * 2 + 30

    if col == 4:
        posy = height / 4 * 3 + 30

    board[row-1][col-1] = XO
 
    if(XO == 'x'):
 

        screen.blit(x_img, (posy, posx))
        XO = 'o'
 
    else:
        screen.blit(o_img, (posy, posx))
        XO = 'x'
    pygame.display.update()
 
 
def user_click():
    x, y = pygame.mouse.get_pos()
 
    if(x < width / 4):
        col = 1
 
    elif (x < width / 4 * 2):
        col = 2
 
    elif(x < width / 4 * 3):
        col = 3

    elif(x < width):
        col = 4
    else:
        col = None
 
    if(y < height / 4):
        row = 1
 
    elif (y < height / 4 * 2):
        row = 2
 
    elif(y < height / 4 * 3):
        row = 3

    elif(y < height):
        row = 4
 
    else:
        row = None
 
    if(row and col and board[row-1][col-1] is None):
        global XO
        drawXO(row, col)
        check_win()
 
 
def reset_game():
    global board, winner, XO, draw
    time.sleep(3)
    XO = 'x'
    draw = False
    game_initiating_window()
    winner = None
    board = [[None]*4, [None]*4, [None]*4]
 
 
game_initiating_window()
 
while(True):
    for event in pygame.event.get():
        if event.type == pygame.locals.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.locals.MOUSEBUTTONDOWN:
            user_click()
            if(winner or draw):
                reset_game()
    pygame.display.update()
    CLOCK.tick(fps)
